# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'screen.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from gui.widgets.Button100x100 import Button100x100
from gui.widgets.Button64x64 import Button64x64
from gui.widgets.Answer import Answer
import os
import gui.screen
from client.controller import execute_action

dirname = os.path.dirname(__file__)
image_folder = os.path.join(dirname, "../images")
totalTime = 60


class UI_QuestionScreen(object):
    def __init__(self, ques, a, b, c, d, isPass):
        self.ques = ques
        self.a = a
        self.b = b
        self.c = c
        self.d = d
        self.choose = 1
        self.isPass = isPass
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        # MainWindow.resize(1280, 960)
        MainWindow.setFixedWidth(1280)
        MainWindow.setFixedHeight(960)
        MainWindow.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setStyleSheet("background-color: #F0F0F0;")

        # title
        self.title = QtWidgets.QLabel(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(0, 50, 1280, 100))
        self.title.setText("")
        self.title.setPixmap(QtGui.QPixmap(
            os.path.join(image_folder, "./question.png")))
        self.title.setAlignment(QtCore.Qt.AlignCenter)
        self.title.setObjectName("titleInformation")

        # ok button
        self.okBtn = Button100x100(self.centralwidget)
        self.okBtn.setImage(os.path.join(image_folder, "./OK-btn.png"))
        self.okBtn.move(590, 690)
        self.okBtn.setName("okBtn")
        self.okBtn.clicked.connect(lambda: self.handleClickOKButton(MainWindow))

        # exit button
        self.exitBtn = Button64x64(self.centralwidget)
        self.exitBtn.setImage(os.path.join(image_folder, "./exit-btn.png"))
        self.exitBtn.move(1170, 30)
        self.exitBtn.setName("exitBtn")
        self.exitBtn.clicked.connect(
            lambda: self.handleClickExitButton(MainWindow))

        # pass button
        self.passBtn = Button64x64(self.centralwidget)
        self.passBtn.setImage(os.path.join(image_folder, "./pass-btn.png"))
        self.passBtn.move(1080, 30)
        self.passBtn.setName("passBtn")
        self.passBtn.clicked.connect(lambda: self.handleClickPassButton(MainWindow))
        if self.isPass:
            self.passBtn.hide()

        # question
        self.question = QtWidgets.QTextBrowser(self.centralwidget)
        self.question.setGeometry(QtCore.QRect(300, 170, 691, 221))
        self.question.setObjectName("question")
        self.question.setStyleSheet(''' border: 1.5px solid #2E7BA6;
                                        color: #1A4F6D;
                                        font-size: 20px;
                                        border-radius: 20px;
                                        padding: 10px;
                                        font-weight: bold; 
                                        background-color: white;''')
        self.question.setText(self.ques)

        # choose A
        self.chooseA = Answer(self.centralwidget)
        self.chooseA.move(90, 480)
        self.chooseA.setText(self.a)
        self.chooseA.setObjectName("chooseA")
        self.chooseA.clicked.connect(self.handleChooseA)

        # chooseB
        self.chooseB = Answer(self.centralwidget)
        self.chooseB.move(90, 590)
        self.chooseB.setText(self.b)
        self.chooseB.setObjectName("chooseB")
        self.chooseB.clicked.connect(self.handleChooseB)

        # choose C
        self.chooseC = Answer(self.centralwidget)
        self.chooseC.move(710, 480)
        self.chooseC.setText(self.c)
        self.chooseC.setObjectName("chooseC")
        self.chooseC.clicked.connect(self.handleChooseC)

        # choose D
        self.chooseD = Answer(self.centralwidget)
        self.chooseD.move(710, 590)
        self.chooseD.setText(self.d)
        self.chooseD.setObjectName("chooseD")
        self.chooseD.clicked.connect(self.handleChooseD)

        # score
        self.score = QtWidgets.QLabel(self.centralwidget)
        self.score.setGeometry(QtCore.QRect(20, 20, 100, 42))
        self.score.setText("")
        self.score.setPixmap(QtGui.QPixmap(
            os.path.join(image_folder, "./score.png")))
        self.score.setScaledContents(True)
        self.score.setAlignment(QtCore.Qt.AlignLeading |
                                QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.score.setObjectName("score")

        self.inputScore = QtWidgets.QLineEdit(self.centralwidget)
        self.inputScore.setGeometry(QtCore.QRect(140, 20, 101, 40))
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        font.setPointSize(23)
        self.inputScore.setFont(font)
        self.inputScore.setStyleSheet(
            "background: transparent; color: #FBC02D; border: none;")
        self.inputScore.setAlignment(
            QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.inputScore.setObjectName("inputScore")

        # timer
        self.countdownTimer = QtWidgets.QProgressBar(self.centralwidget)
        self.countdownTimer.setGeometry(QtCore.QRect(20, 80, 221, 23))
        self.countdownTimer.setAutoFillBackground(False)
        self.countdownTimer.setStyleSheet('''
                                                QProgressBar{
                                                    border: solid grey;
                                                    border-radius: 5px;
                                                    color: black;
                                                }

                                                QProgressBar::chunk {
                                                    background-color: #05B8CC;
                                                    border-radius: 5px;
                                                }
                                          ''')
        self.countdownTimer.setMaximum(totalTime)
        self.countdownTimer.setProperty("value", 0)
        self.countdownTimer.setTextVisible(False)
        self.countdownTimer.setObjectName("countdownTimer")

        self.setDurationTime()

        self.timer = QtCore.QTimer(self.centralwidget)
        self.timer.timeout.connect(lambda: self.runCountdown(MainWindow))
        self.timer.start(1000)

        # result
        self.result = QtWidgets.QLabel(self.centralwidget)
        self.result.setGeometry(QtCore.QRect(0, 250, 1280, 400))
        self.result.setText("")
        self.result.setAlignment(QtCore.Qt.AlignCenter)
        self.result.setObjectName("result")
        self.result.hide()

        # setup
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        response = execute_action("get_status", None)
        result = eval(response)
        score = result.get("score")
        self.inputScore.setText(_translate("MainWindow", str(score)))

    # pass button or not
    def isPassLeft(self, isPass):
        if (isPass):
            self.passBtn.show()
        else:
            print("hello")
            self.passBtn.hide()

    # main player or not: isMain to check main player or not, isPass to check pass button
    def isMainPlayer(self, isMain, isPass):
        if (isMain):
            self.okBtn.show()
            self.isPassLeft(isPass)
        else:
            print("hello")
            self.okBtn.hide()
            self.passBtn.hide()

    # show result
    def showResult(self, result):
        if result:
            self.result.setPixmap(QtGui.QPixmap(
                os.path.join(image_folder, "./correct.png")))
            self.result.show()
        else:
            self.result.setPixmap(QtGui.QPixmap(
                os.path.join(image_folder, "./wrong.png")))
            self.result.show()

    # click button

    def handleClickPassButton(self, MainWindow):
        self.timer.stop()
        response = execute_action("next_question", None)
        print(response)
        ui = gui.screen.UI_InformationScreen()
        ui.setupUi(MainWindow)
        MainWindow.show()
        print("Pass!")

    def handleClickExitButton(self, MainWindow):
        MainWindow.close()

    def handleClickOKButton(self, MainWindow):
        self.timer.stop()
        self.okBtn.hide()
        result = self.check_answer()
        self.showResult(result[0])
        response = execute_action("get_status", None)
        if (response == "None"):
            ui = gui.screen.UI_EndgameScreen()
            ui.setupUi(MainWindow)
            MainWindow.show()
        else:
            result = eval(response)
            if result.get("total_player") == 1:
                ui = gui.screen.UI_EndgameScreen()
                ui.setupUi(MainWindow)
                MainWindow.show()
            else:
                ui = gui.screen.UI_InformationScreen()
                ui.setupUi(MainWindow)
                MainWindow.show()
            

    # score
    def setScore(self, score):
        self.inputScore.setText(score)

    # time
    def setDurationTime(self):
        self.time_left_int = totalTime

    def runCountdown(self, MainWindow):
        self.time_left_int -= 1
        print(self.time_left_int)
        self.countdownTimer.setValue(totalTime - self.time_left_int)
        if self.time_left_int == 0:
            self.timer.stop()
            ui = gui.screen.UI_EndgameScreen()
            ui.setupUi(MainWindow)
            MainWindow.show()

    # answer
    def handleChooseA(self):
        self.chooseA.isChoose(True)
        self.chooseB.isChoose(False)
        self.chooseC.isChoose(False)
        self.chooseD.isChoose(False)
        self.choose = 1


    def handleChooseB(self):
        self.chooseA.isChoose(False)
        self.chooseB.isChoose(True)
        self.chooseC.isChoose(False)
        self.chooseD.isChoose(False)
        self.choose = 2

    def handleChooseC(self):
        self.chooseA.isChoose(False)
        self.chooseB.isChoose(False)
        self.chooseC.isChoose(True)
        self.chooseD.isChoose(False)
        self.choose = 3

    def handleChooseD(self):
        self.chooseA.isChoose(False)
        self.chooseB.isChoose(False)
        self.chooseC.isChoose(False)
        self.chooseD.isChoose(True)
        self.choose = 4

    def check_answer(self):
        if (self.choose == 1):
            response = execute_action("answer_question", f"{self.a}")
        elif (self.choose == 2):
            response = execute_action("answer_question", f"{self.b}")
        elif (self.choose == 3):
            response = execute_action("answer_question", f"{self.c}")
        elif (self.choose == 4):
            response = execute_action("answer_question", f"{self.d}")

        result = eval(response)
        correct = result.get("correct")
        score = result.get("score")
        return (correct, score)

